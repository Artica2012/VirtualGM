Stats:
Strength = str
Dexterity = dex
Constitution  = con
Intelligence = itl
Wisdom = wis
Charisma = cha

Saves:
Fortitude = fort
Reflex = reflex
Will = will

Skills:
skill name, all lower case

Spellcasting:
arcane
divine
occult
primal

Other:
Armor Class = ac
attack = attack
damage = dmg

Circumstance Bonus = c
Status Bonus = s
Item Bonus = i

Condition Data Syntax:
    modifier (+/-)# (type);

Example:
 +1 Intelligence Status Bonus:  "int +1 c;"
 +1 to Crafting Item: "crafting +1 i;"
 Flat Footed: "ac -2 c;"


 ----------------------------------
 Attack Data Structure
 Display Name = {
                "display": item["display"], # Display Name
                "prof": item["prof"],  # Proficiency (Unarmed, Simple, Martial, Advanced)
                "die": item["die"],  # Damage Die Size
                "pot": item["pot"], # Potency Rune (1,2,3)
                "str": item["str"], # "", striking, greaterStriking, majorStriking (Pathbuilder Legacy Purposes)
                "name": item["name"],  # Weapon Name (For lookup)
                "runes": item["runes"], # List of runes (For future use)
                "die_num": die_num, # Number of damage die
                "crit": "*2", # Crit string, defaults to *2, but could be *2+1d6 or something of the sort
                "stat": "str",  # What stat to use for damage
                "dmg_type": "Bludgeoning",  # Damage Type
                "attk_stat": "str",  # What stat to use for the attack (probably str or dex)
                "bonus": [
                    {
                        "damage": # Damage String
                        "dmg_type": # Damage Type
                    }
                ]
                "traits": []
 }


----------------------------------
Resistances / Weakness / Immunities
resistance= {
                        "resist": {
                            "cold": 1
                        },
                        "weak": {},
                        "immune": {}
                    }


attribute name (w, r, i) #;
  eg "cold r 1;"


class EPF_NPC(Base):
    __tablename__ = "EPF_npcs"

    # The original tracker table
    id = Column(Integer(), primary_key=True, autoincrement=True)
    name = Column(String(), nullable=False, unique=True)
    max_hp = Column(Integer(), default=1)

    # General
    type = Column(String(), nullable=False)
    level = Column(Integer(), nullable=False)
    ac_base = Column(Integer(), nullable=False)
    class_dc = Column(Integer(), nullable=False)

    # Stats
    str = Column(Integer(), nullable=False)
    dex = Column(Integer(), nullable=False)
    con = Column(Integer(), nullable=False)
    itl = Column(Integer(), nullable=False)
    wis = Column(Integer(), nullable=False)
    cha = Column(Integer(), nullable=False)

    # Saves
    fort_prof = Column(Integer(), nullable=False)
    will_prof = Column(Integer(), nullable=False)
    reflex_prof = Column(Integer(), nullable=False)

    # Proficiencies
    perception_prof = Column(Integer(), nullable=False)

    arcane_prof = Column(Integer(), nullable=False)
    divine_prof = Column(Integer(), nullable=False)
    occult_prof = Column(Integer(), nullable=False)
    primal_prof = Column(Integer(), nullable=False)

    acrobatics_prof = Column(Integer(), nullable=False)
    arcana_prof = Column(Integer(), nullable=False)
    athletics_prof = Column(Integer(), nullable=False)
    crafting_prof = Column(Integer(), nullable=False)
    deception_prof = Column(Integer(), nullable=False)
    diplomacy_prof = Column(Integer(), nullable=False)
    intimidation_prof = Column(Integer(), nullable=False)
    medicine_prof = Column(Integer(), nullable=False)
    nature_prof = Column(Integer(), nullable=False)
    occultism_prof = Column(Integer(), nullable=False)
    performance_prof = Column(Integer(), nullable=False)
    religion_prof = Column(Integer(), nullable=False)
    society_prof = Column(Integer(), nullable=False)
    stealth_prof = Column(Integer(), nullable=False)
    survival_prof = Column(Integer(), nullable=False)
    thievery_prof = Column(Integer(), nullable=False)

    # Plan to save parsable lists here

    # Calculated stats
    resistance = Column(JSON())
    attacks = Column(JSON())
    spells = Column(JSON())
